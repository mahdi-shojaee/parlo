# yaml-language-server: $schema=./benchconfigs-schema.json

Min:
  sizes: [5000, 10000, 50000, 100000, 500000, 1000000, 5000000, 10000000]
  baseFuncName: parlo.Min
  funcName: parlo.ParMin
  immutable: true
  scenarios:
    - description: Input is sorted in ascending order
      elemType: int
      elemAtIndex: index
    - description: Input is sorted in descending order
      elemType: int
      elemAtIndex: size - index - 1

MinFunc:
  sizes: [5000, 10000, 50000, 100000, 500000, 1000000, 5000000, 10000000]
  baseFuncName: parlo.MinFunc
  funcName: parlo.ParMinFunc
  immutable: true
  scenarios:
    - description: Input is sorted in ascending order
      elemType: int
      elemAtIndex: index
      extraArgs: "func(a, b int) int { return a - b }"
    - description: Input is sorted in descending order
      elemType: int
      elemAtIndex: size - index - 1
      extraArgs: "func(a, b int) int { return a - b }"

Max:
  sizes: [5000, 10000, 50000, 100000, 500000, 1000000, 5000000, 10000000]
  baseFuncName: parlo.Max
  funcName: parlo.ParMax
  immutable: true
  scenarios:
    - description: Input is sorted in ascending order
      elemType: int
      elemAtIndex: index
    - description: Input is sorted in descending order
      elemType: int
      elemAtIndex: size - index - 1

MaxFunc:
  sizes: [5000, 10000, 50000, 100000, 500000, 1000000, 5000000, 10000000]
  baseFuncName: parlo.MaxFunc
  funcName: parlo.ParMaxFunc
  immutable: true
  scenarios:
    - description: Input is sorted in ascending order
      elemType: int
      elemAtIndex: index
      extraArgs: "func(a, b int) int { return a - b }"
    - description: Input is sorted in descending order
      elemType: int
      elemAtIndex: size - index - 1
      extraArgs: "func(a, b int) int { return a - b }"

Filter:
  sizes: [5000, 10000, 50000, 100000, 500000, 1000000, 5000000, 10000000]
  baseFuncName: parlo.Filter
  funcName: parlo.ParFilter
  immutable: true
  scenarios:
    - description: No elements are accepted
      elemType: int
      elemAtIndex: index
      extraArgs: "func(item int, index int) bool { return false }"
    - description: Half of the elements are accepted
      elemType: int
      elemAtIndex: index
      extraArgs: "func(item int, index int) bool { return item % 2 == 0 }"
    - description: All elements are accepted
      elemType: int
      elemAtIndex: index
      extraArgs: "func(item int, index int) bool { return true }"

IsSorted:
  sizes: [5000, 10000, 50000, 100000, 500000, 1000000, 5000000, 10000000]
  baseFuncName: parlo.IsSorted
  funcName: parlo.ParIsSorted
  immutable: true
  scenarios:
    - description: Input is sorted in ascending order
      elemType: int
      elemAtIndex: index

Equal:
  sizes: [5000, 10000, 50000, 100000, 500000, 1000000, 5000000, 10000000]
  baseFuncName: parlo.Equal
  funcName: parlo.ParEqual
  immutable: true
  scenarios:
    - description: Input is sorted in ascending order
      elemType: int
      elemAtIndex: index
      extraArgs: slice

EqualFunc:
  sizes: [5000, 10000, 50000, 100000, 500000, 1000000, 5000000, 10000000]
  baseFuncName: parlo.EqualFunc
  funcName: parlo.ParEqualFunc
  immutable: true
  scenarios:
    - description: Input is sorted in ascending order
      elemType: int
      elemAtIndex: index
      extraArgs: "slice, func(a, b int) bool { return a == b }"

Sort:
  sizes: [5000, 10000, 50000, 100000, 500000, 1000000, 5000000, 10000000]
  baseFuncName: parlo.Sort
  funcName: parlo.ParSort
  immutable: false
  scenarios:
    - description: Input is sorted in ascending order
      elemType: int
      elemAtIndex: index
    - description: Input is sorted in descending order
      elemType: int
      elemAtIndex: size - index - 1
    - description: Input is sorted ascendingly with 10% of elements randomly swapped
      elemType: int
      swapRatio: 0.1
      elemAtIndex: index
    - description: Input is sorted descendingly with 10% of elements randomly swapped
      elemType: int
      swapRatio: 0.1
      elemAtIndex: size - index - 1
    - description: Input is sorted ascendingly with 20% of elements randomly swapped
      elemType: int
      swapRatio: 0.2
      elemAtIndex: index
    - description: Input is sorted descendingly with 20% of elements randomly swapped
      elemType: int
      swapRatio: 0.2
      elemAtIndex: size - index - 1
    - description: Input is randomly generated
      imports: [math/rand]
      elemType: int
      elemAtIndex: rand.Intn(size)

SortFunc:
  sizes: [5000, 10000, 50000, 100000, 500000, 1000000, 5000000, 10000000]
  baseFuncName: parlo.SortFunc
  funcName: parlo.ParSortFunc
  immutable: false
  scenarios:
    - description: Input is sorted in ascending order
      elemType: int
      elemAtIndex: index
      extraArgs: "func(a, b int) int { return a - b }"
    - description: Input is sorted in descending order
      elemType: int
      elemAtIndex: size - index - 1
      extraArgs: "func(a, b int) int { return a - b }"
    - description: Input is sorted ascendingly with 10% of elements randomly swapped
      elemType: int
      swapRatio: 0.1
      elemAtIndex: index
      extraArgs: "func(a, b int) int { return a - b }"
    - description: Input is sorted descendingly with 10% of elements randomly swapped
      elemType: int
      swapRatio: 0.1
      elemAtIndex: size - index - 1
      extraArgs: "func(a, b int) int { return a - b }"
    - description: Input is sorted ascendingly with 20% of elements randomly swapped
      elemType: int
      swapRatio: 0.2
      elemAtIndex: index
      extraArgs: "func(a, b int) int { return a - b }"
    - description: Input is sorted descendingly with 20% of elements randomly swapped
      elemType: int
      swapRatio: 0.2
      elemAtIndex: size - index - 1
      extraArgs: "func(a, b int) int { return a - b }"
    - description: Input is randomly generated
      imports: [math/rand]
      elemType: int
      elemAtIndex: rand.Intn(size)
      extraArgs: "func(a, b int) int { return a - b }"

SortStableFunc:
  sizes: [5000, 10000, 50000, 100000, 500000, 1000000, 5000000, 10000000]
  baseFuncName: parlo.SortStableFunc
  funcName: parlo.ParSortStableFunc
  immutable: false
  scenarios:
    - description: Input is sorted in ascending order
      elemType: int
      elemAtIndex: index
      extraArgs: "func(a, b int) int { return a - b }"
    - description: Input is sorted in descending order
      elemType: int
      elemAtIndex: size - index - 1
      extraArgs: "func(a, b int) int { return a - b }"
    - description: Input is sorted ascendingly with 10% of elements randomly swapped
      elemType: int
      swapRatio: 0.1
      elemAtIndex: index
      extraArgs: "func(a, b int) int { return a - b }"
    - description: Input is sorted descendingly with 10% of elements randomly swapped
      elemType: int
      swapRatio: 0.1
      elemAtIndex: size - index - 1
      extraArgs: "func(a, b int) int { return a - b }"
    - description: Input is sorted ascendingly with 20% of elements randomly swapped
      elemType: int
      swapRatio: 0.2
      elemAtIndex: index
      extraArgs: "func(a, b int) int { return a - b }"
    - description: Input is sorted descendingly with 20% of elements randomly swapped
      elemType: int
      swapRatio: 0.2
      elemAtIndex: size - index - 1
      extraArgs: "func(a, b int) int { return a - b }"
    - description: Input is randomly generated
      imports: [math/rand]
      elemType: int
      elemAtIndex: rand.Intn(size)
      extraArgs: "func(a, b int) int { return a - b }"

Map:
  sizes: [5000, 10000, 50000, 100000, 500000, 1000000, 5000000, 10000000]
  baseFuncName: parlo.Map
  funcName: parlo.ParMap
  immutable: true
  typeArgs: "[]int, []int"
  scenarios:
    - description: Input is sorted in ascending order
      elemType: int
      elemAtIndex: index
      extraArgs: "func(item int, index int) int { return item }"

FilterMap:
  sizes: [5000, 10000, 50000, 100000, 500000, 1000000, 5000000, 10000000]
  baseFuncName: parlo.FilterMap
  funcName: parlo.ParFilterMap
  immutable: true
  typeArgs: "[]int, []int"
  scenarios:
    - description: No elements are accepted
      elemType: int
      elemAtIndex: index
      extraArgs: "func(item int, index int) (int, bool) { return 0, false }"
    - description: Half of the elements are accepted
      elemType: int
      elemAtIndex: index
      extraArgs: "func(item int, index int) (int, bool) { if item % 2 == 0 { return item, true } else { return 0, false } }"
    - description: All elements are accepted
      elemType: int
      elemAtIndex: index
      extraArgs: "func(item int, index int) (int, bool) { return item, true }"
