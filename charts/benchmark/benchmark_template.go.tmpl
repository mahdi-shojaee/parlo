// Code generated by parlo benchmark generator. DO NOT EDIT.

// Benchmark scenario: {{.Scenario.Description}}

package benchmark_test

import (
	"fmt"
	"testing"
	{{- range .Scenario.Imports}}
	"{{.}}"
	{{- end}}
	
	"github.com/mahdi-shojaee/parlo"
	"github.com/mahdi-shojaee/parlo/charts/benchmark"
)

// Benchmark{{.Name}} runs benchmarks for different slice sizes and functions
func Benchmark{{.Name}}(b *testing.B) {
	sizes := []int{ {{range $index, $element := .Sizes}}{{if $index}},{{end}}{{$element}}{{end}} }

	// Create a large slice to be used for all benchmark runs
	bigSlice := benchmark.MakeCollection[[]{{.Scenario.ElemType}}](
		parlo.Max(sizes),
		{{.Scenario.SwapRatio}},
		func(index, size int) {{.Scenario.ElemType}} {
			return {{.Scenario.ElemType}}({{.Scenario.ElemAtIndex}})
		},
	)

	for _, size := range sizes {
		slice := make([]{{.Scenario.ElemType}}, size)
		copy(slice, bigSlice[:size])
		b.Run(fmt.Sprintf("{{.BaseFuncName}}-Len=%d", size), func(b *testing.B) {
			for i := 0; i < b.N; i++ {
				{{.BaseFuncName}}(slice{{if $.Scenario.ExtraArgs}}, {{$.Scenario.ExtraArgs}}{{end}})
			}
		})

		copy(slice, bigSlice[:size])
		b.Run(fmt.Sprintf("{{.FuncName}}-Len=%d", size), func(b *testing.B) {
			for i := 0; i < b.N; i++ {
				{{.FuncName}}(slice{{if $.Scenario.ExtraArgs}}, {{$.Scenario.ExtraArgs}}{{end}})
			}
		})

		fmt.Println()
	}
}